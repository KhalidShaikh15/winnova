rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check admin status
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== DEFAULT DENY =====
    // Deny all reads and writes by default to ensure security.
    match /{document=**} {
      allow read, write: if false;
    }

    // ===== USERS =====
    match /users/{userId} {
      // A user can create their own document, and can read/update it.
      // Only admins can delete user documents.
      allow create, read, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    // ===== GAMES (Public Read) =====
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== TOURNAMENTS (Public Read) =====
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== MATCHES (Public Read for Leaderboard) =====
    match /matches/{matchId} {
      // This collection needs to be public so the leaderboard can be built
      // by anyone, authenticated or not.
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== REGISTRATIONS (Protected) =====
    match /registrations/{registrationId} {
      // Any authenticated user can create a registration.
      allow create: if request.auth != null;
      // Only an admin or the user who created the registration can read it.
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.user_id);
      // Only an admin can update (e.g., confirm/reject) or delete a registration.
      allow update, delete: if isAdmin();
    }

    // ===== ADMINS (Private) =====
    match /admins/{adminId} {
      // This collection is fully private. Nobody can read or write to it from the client.
      // This prevents users from being able to see who the admins are.
      allow read, write: if false;
    }
  }
}
