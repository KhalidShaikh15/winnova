rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check admin status
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== DEFAULT DENY =====
    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // ===== USERS =====
    match /users/{userId} {
      // Signed-in user can manage their own profile, Admins can manage any.
      allow read, update, delete: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // ===== GAMES (Public Read) =====
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== TOURNAMENTS (Public Read) =====
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== MATCHES (Public Read for Leaderboard) =====
    match /matches/{matchId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== REGISTRATIONS =====
    match /registrations/{registrationId} {
      // Allow the query for duplicate squad names to proceed.
      // This is secure because the client query also includes tournament_id.
      allow list: if request.auth != null &&
                   request.query.keys().hasOnly(['tournament_id', 'squad_name_lowercase']);

      // Any logged-in user can create their own registration
      allow create: if request.auth != null;

      // User can read their own registration or admin can read all
      allow read: if isAdmin() ||
                   (request.auth != null && request.auth.uid == resource.data.user_id);
                   
      // Admin can update/delete
      allow update, delete: if isAdmin();
    }
    
    // ===== ADMINS (Private) =====
    match /admins/{adminId} {
      allow read, write: if false; // Fully private
    }
  }
}
