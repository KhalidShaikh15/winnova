rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check admin status
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== DEFAULT DENY =====
    // Deny all reads and writes by default. We will open up collections
    // one by one. This is more secure than a default allow.
    match /{document=**} {
      allow read, write: if false;
    }

    // ===== USERS =====
    match /users/{userId} {
      // The signed-in user can read/update their own profile.
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow a user to create their own document.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only an admin can delete a user document.
      allow delete: if isAdmin();
    }

    // ===== GAMES (Public Read) =====
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== TOURNAMENTS (Public Read) =====
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== MATCHES (Public Read for Leaderboard) =====
    match /matches/{matchId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== REGISTRATIONS =====
    // The most sensitive collection.
    match /registrations/{registrationId} {
      // Any logged-in user can create a registration.
      // The validation is handled by a Cloud Function.
      allow create: if request.auth != null;

      // Only the user who created the registration or an admin can read it.
      allow read: if isAdmin() || 
                   (request.auth != null && request.auth.uid == resource.data.user_id);

      // Only an admin can update or delete.
      allow update, delete: if isAdmin();
    }

    // ===== ADMINS (Private) =====
    match /admins/{adminId} {
      // No one can read or write this collection from the client.
      // This is for server-side checks only.
      allow read, write: if false;
    }
  }
}
