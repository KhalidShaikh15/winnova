rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to check admin status
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== DEFAULT DENY =====
    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // ===== USERS =====
    match /users/{userId} {
      // Only the signed-in user can read/update their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow users to create their own document
      allow create: if request.auth != null && request.resource.id == request.auth.uid;
      allow delete: if isAdmin();
    }

    // ===== GAMES (Public Read) =====
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== TOURNAMENTS (Public Read) =====
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // ===== MATCHES (Public Read for Leaderboard) =====
    match /matches/{matchId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ===== REGISTRATIONS (Protected) =====
    match /registrations/{registrationId} {
      // Allow a user to query for duplicate squad names within a tournament.
      // This is secure because it doesn't return any document data, just whether one exists.
      allow list: if request.auth != null
                  && 'tournament_id' in request.query.get('where', {})
                  && 'squad_name_lowercase' in request.query.get('where', {});

      allow create: if request.auth != null;
      allow read: if isAdmin() || 
                   (request.auth != null && request.auth.uid == resource.data.user_id);
      allow update, delete: if isAdmin();
    }

    // ===== ADMINS (Private) =====
    match /admins/{adminId} {
      allow read, write: if false;   // Fully private
    }
  }
}
