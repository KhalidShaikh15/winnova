rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the user's UID exists in the 'admins' collection.
      // request.auth is null if the user is not authenticated.
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // By default, deny all access to collections not explicitly matched.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read/update their own data. Creation happens on signup.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Allow user creation during signup
    }

    // Games and Tournaments are public to read, but only admins can modify.
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Match results need to be public for the leaderboard calculation.
    match /matches/{matchId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Registrations can be created by any authenticated user.
    // Only the user who created it or an admin can read it.
    // Only admins can update/delete it.
    match /registrations/{registrationId} {
      allow create: if request.auth != null;
      allow read: if (request.auth != null && request.auth.uid == resource.data.user_id) || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // Admins collection is private. Only backend services should write to this.
    match /admins/{adminId} {
      allow read, write: if false;
    }
  }
}
